env:
    PUBLIC_VERSION_NUMBER: '1.0'
    PORTABLE_DIR: ${{ github.workspace }}\output\installer
    INSTALLBUILDER_DIR: ib/app
    INSTALLBUILDER_URL: https://installbuilder.com/installbuilder-professional-22.10.0-windows-installer.exe

name: Build  'pilot-january-2023 with Installer'
on: [workflow_dispatch]  
jobs:
  build:
    runs-on: windows-latest
    steps:   
      - uses: actions/checkout@v3
        with:
           path: maco_content_2023_packages
      - name: Checkout runtimes
        uses: actions/checkout@v3
        with:
          repository: kroehne/maco_content_2023_runtimes    
          token: ${{ secrets.MACO_CONTENT_CHECKOUT}}  
          path: maco_content_2023_runtimes
      - name: Checkout content in branch 'pilot-january-2023'
        uses: actions/checkout@v3
        with:
          repository: kroehne/maco_content_2023    
          token: ${{ secrets.MACO_CONTENT_CHECKOUT}}  
          path: maco_content_2023
          ref: pilot-january-2023 
      - name: Get short hash of DIPF content repository 
        shell: bash
        run: |         
         cd maco_content_2023
         echo "SHORT_SHA_PUBLIC_CONTENT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV   
         cd ..
         cd maco_content_2023_runtimes
         echo "SHORT_SHA_PUBLIC_RUNTIMES=$(git rev-parse --short HEAD)" >> $GITHUB_ENV   
         cd ..         
      - name: Prepare folders
        shell: bash
        run: |      
         mkdir -p maco_content_2023/items/cover
         cp maco_content_2023/cover/*.zip maco_content_2023/items/cover   
         mkdir -p maco_content_2023/runtimes
         cp -r maco_content_2023_runtimes/9.8.0 maco_content_2023/runtimes
         mkdir -p output/ 
         cp -r maco_content_2023/materials output/
         mkdir docs
         mkdir software-driven
      - name: Checkout Alea / Testapp 
        shell: bash
        run: |
          git clone --branch develop https://ukroehne:${{ secrets.CHECKINKEYMACO }}@bitbucket.org/software-driven/dipf-alea.git software-driven/dipf-alea
          cd software-driven/dipf-alea
          echo "SHORT_SHA_ALEA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV   
          cd ..         
          cd ..         
          git clone --branch develop https://ukroehne:${{ secrets.CHECKINKEYMACO }}@bitbucket.org/software-driven/dipf-testapp.git software-driven/dipf-testapp
          cd software-driven/dipf-testapp
          echo "SHORT_SHA_TESTAPP=$(git rev-parse --short HEAD)" >> $GITHUB_ENV   
          cd ..         
          cd ..         
          git clone --branch develop https://ukroehne:${{ secrets.CHECKINKEYMACO }}@bitbucket.org/software-driven/dipf-maco.git software-driven/dipf-maco
          cd software-driven/dipf-maco
          echo "SHORT_SHA_MACO=$(git rev-parse --short HEAD)" >> $GITHUB_ENV   
          cd ..         
          cd ..              
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.0.x
      - name: Checkout content 
        run: |
          git clone --branch pilot-january-2023 https://ukroehne:${{ secrets.CHECKINKEYMACO }}@bitbucket.org/software-driven/dipf-alea-content.git content   
      - name: Get short hash of SD content repository 
        shell: bash
        run: |               
          cd content
          echo "SHORT_SHA_CONTENT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV   
          cd ..           
      - name: Update content
        continue-on-error: true
        run: |                     
         cp -Recurse -force ./content/* ./output/
         # rm -r -fo ./output/ItemPool
         rm -r -fo ./output/.git
      - name: Create restore folder if required 
        shell: bash
        continue-on-error: true
        run: |              
         mkdir -p ./content/restore/            
      - name: Restore database
        continue-on-error: true
        run: |              
         cp -r -fo ./content/restore/*.json ./software-driven/dipf-alea/Alea.Prepare/data    
      - name: List Content (Debug)
        shell: bash
        run: |      
         ls -R         
      - name: Build output  
        run: | 
          cd software-driven
          cd dipf-alea
          cd Alea.Prepare
          dotnet run --project ./Alea.Prepare.csproj -- -w false -m false -v ${{ env.SHORT_SHA_PUBLIC_CONTENT }} -x ../../../content/restore/ -c ../../../maco_content_2023/codebooks/ -d ../../../output/ -i  ../../../maco_content_2023/items/ -r ../../../maco_content_2023/runtimes/ -s ../../../output/ > "../../../output/alea_prepare_log.txt"
          cd ..
          cd ..
          cd ..                 
      - name: Remove old content
        continue-on-error: true
        run: |              
         rm -r -fo ./content/ItemPool
         rm -r -fo ./content/materials
         rm -r -fo ./content/Runtime
         rm -r -fo ./content/Studies
      - name: Update content
        continue-on-error: true
        run: |              
         cp -r -fo output/* ./content/   
         rm -r -fo ./content/alea_prepare_log.txt
      - name: Backup database
        continue-on-error: true
        run: |                       
         cp -r -fo ./software-driven/dipf-alea/Alea.Prepare/data/*.json ./content/restore
      - name: List Content (Debug)
        shell: bash
        run: |      
         ls -R          
      - name: Commit and push
        continue-on-error: true
        run: |
          cd content
          git config --global user.name 'Worker on maco_content_2023_packages'
          git config --global user.email 'u.kroehne@dipf.de'
          git add -A 
          git commit -am "Automated update using PUBLIC CONTENT ${{ env.SHORT_SHA_PUBLIC_CONTENT }} and PUBLIC RUNTIMES ${{ env.SHORT_SHA_PUBLIC_RUNTIMES }} based on CONTENT ${{ env.SHORT_SHA_CONTENT }} with ALEA ${{ env.SHORT_SHA_ALEA }} and TESTAPP ${{ env.SHORT_SHA_TESTAPP }}"
          git push       
      - name: Copy content for installer 
        shell: bash
        run: |               
         cp -r output/ ./software-driven/dipf-alea/Installer/Content   
      - name: Install installer tool 'InstalBuilder'
        shell: bash
        env:
         IB_LICENSE: ${{ secrets.IB_LICENSE }}
        run: |
            curl -L ${{ env.INSTALLBUILDER_URL }} --output ib.exe
            ./ib.exe --mode unattended --prefix ${{ env.INSTALLBUILDER_DIR }}
            ${{ env.INSTALLBUILDER_DIR }}/bin/builder-cli.exe --version
            echo "$IB_LICENSE" > lic.xml
            echo "INSTALLER_SRC_PREFIX=$(pwd)" >> $GITHUB_ENV
            echo "INSTALLER_BIN_PREFIX=$ABSOLUTE_PORTABLE_DIR" >> $GITHUB_ENV                    
      - name: Create installer package
        shell: bash
        run: |                     
            ${{ env.INSTALLBUILDER_DIR }}/bin/builder-cli.exe build ./software-driven/dipf-alea/Installer/AleaDesktop-Pilot.xml windows-x64 \
                --license lic.xml \
                --setvars project.outputDirectory=$(pwd) \
                --setvars project.version=$PUBLIC_VERSION_NUMBER \
                --setvars project.fullName="AleaDesktop (MSK-OC) -- Pilot Januar 2023" \
                --setvars vendor="DIPF / erstellt durch Software Driven UG" 
      - name: Upload package artifact
        uses: actions/upload-artifact@v3
        with:
          name: AleaDesktop-${{ env.PUBLIC_VERSION_NUMBER }}-windows-x64-installer-${{ env.SHORT_SHA_PUBLIC_CONTENT }}
          path: |
            AleaDesktop-${{ env.PUBLIC_VERSION_NUMBER }}-windows-x64-installer.exe   
            output/alea_prepare_log.txt     
      - name: Create release          
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.PUBLIC_VERSION_NUMBER}}-${{ env.SHORT_SHA_PUBLIC_CONTENT}}"
          prerelease: true          
          title: "${{ env.PUBLIC_VERSION_NUMBER}} (${{ env.SHORT_SHA_PUBLIC_CONTENT}})"
          files: |
            AleaDesktop-${{ env.PUBLIC_VERSION_NUMBER }}-windows-x64-installer.exe            